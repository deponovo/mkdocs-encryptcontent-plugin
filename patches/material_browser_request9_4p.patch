--- src/templates/assets/javascripts/browser/request/index.ts
+++ src/templates/assets/javascripts/browser/request/index.ts
@@ -24,6 +24,9 @@ import {
   Observable,
   Subject,
   map,
+  tap,
+  of,
+  throwError,
   shareReplay,
   switchMap
 } from "rxjs"
@@ -117,12 +120,40 @@ export function request(
 export function requestJSON<T>(
   url: URL | string, options?: Options
 ): Observable<T> {
-  return request(url, options)
-    .pipe(
-      switchMap(res => res.text()),
-      map(body => JSON.parse(body) as T),
-      shareReplay(1)
-    )
+  /* Hack to enable search Index decryption */
+  if (url.href.endsWith('/search_index.json')) {
+    const encryptcontentIndexKey = 'encryptcontent-index';
+    const encryptcontentIndex = sessionStorage.getItem(encryptcontentIndexKey);
+
+    if (encryptcontentIndex) {
+      // if already available in sessionStorage return Observable JSON data
+      try {
+        const parsedData = JSON.parse(encryptcontentIndex) as T;
+        return of(parsedData);
+      } catch (error) {
+        console.error('Error parsing encryptcontent-index:', error);
+        return throwError(error);
+      }
+    } else {
+      // if not yet available in sessionStorage request JSON data
+      return request(url, options).pipe(
+        switchMap(res => res.text()),
+        map(body => JSON.parse(body) as T),
+        tap((jsonData) => {
+          // and save them to sessionstorage
+          sessionStorage.setItem(encryptcontentIndexKey, JSON.stringify(jsonData));
+        }),
+        shareReplay(1)
+      );
+    }
+  } else {
+    return request(url, options)
+      .pipe(
+        switchMap(res => res.text()),
+        map(body => JSON.parse(body) as T),
+        shareReplay(1)
+      )
+  }
 }
 
 /**
